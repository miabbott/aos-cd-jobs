---
parameters:
  - name: BUILD_ID
    description: "Unique build number for each run."
  - name: REPO_OWNER
    description: "GitHub org that triggered the job."
  - name: REPO_NAME
    description: "GitHub repo that triggered the job."
  - name: PULL_BASE_REF
    description: "Ref name of the base branch."
  - name: PULL_BASE_SHA
    description: "Git SHA of the base branch."
  - name: PULL_REFS
    description: "All refs to test."
  - name: PULL_NUMBER
    description: "Pull request number."
  - name: PULL_PULL_SHA
    description: "Pull request head SHA."
  - name: JOB_SPEC
    description: "JSON form of job specification."
  - name: PROW_JOB_ID
    description: "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob."
provision:
  os: "rhel"
  stage: "base"
  provider: "aws"
sync: []
actions:
  - type: "forward_parameters"
    parameters:
      - JOB_NAME
      - BUILD_NUMBER
post_actions:
  - type: "host_script"
    title: "assemble GCS output"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/artifacts gcs/artifacts/generated gcs/artifacts/journals gcs/artifacts/gathered
      result=$( python -c "import json; import urllib; print json.load(urllib.urlopen('${BUILD_URL}api/json'))['result']" )
      cat <<FINISHED >gcs/finished.json
      {
        "timestamp": $( date +%s ),
        "result": "${result}"
      }
      FINISHED
      cat "/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log" > gcs/build-log.txt
      cp -r artifacts/generated gcs/artifacts/
      cp -r artifacts/journals gcs/artifacts/
      cp -r artifacts/gathered/ gcs/artifacts/

      scp -F ./.config/origin-ci-tool/inventory/.ssh_config -r "$( pwd )/gcs" openshiftdevel:/data
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config /var/lib/jenkins/.config/gcloud/gcs-publisher-credentials.json openshiftdevel:/data/credentials.json
  - type: "script"
    title: "push the artifacts and metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      if [[ -n "${JOB_SPEC:-}" ]]; then
        JOB_SPEC="$( jq --compact-output ".buildid |= \"${BUILD_NUMBER}\"" <<<"${JOB_SPEC}" )"
        docker run -e JOB_SPEC="${JOB_SPEC}" -v "/data:/data:z" registry.svc.ci.openshift.org/ci/gcsupload:latest --dry-run=false --gcs-path=gs://origin-ci-test --gcs-credentials-file=/data/credentials.json --path-strategy=single --default-org=openshift --default-repo=origin /data/gcs/*
      fi
artifacts: []
generated_artifacts:
  installed_packages.log: 'sudo yum list installed'
  avc_denials.log: 'sudo ausearch -m AVC -m SELINUX_ERR -m USER_AVC'
  docker.info: 'sudo docker version && sudo docker info && sudo docker images && sudo docker ps -a'
  docker.config: 'sudo cat /etc/sysconfig/docker /etc/sysconfig/docker-network /etc/sysconfig/docker-storage /etc/sysconfig/docker-storage-setup /etc/systemd/system/docker.service'
  filesystem.info: 'sudo df -T -h && sudo pvs && sudo vgs && sudo lvs && sudo findmnt --all'
  pid1.journal: 'sudo journalctl _PID=1 --no-pager --all --lines=all'
  dmesg.log: 'sudo journalctl --dmesg --no-pager --all --lines=all'
  containers.log: 'sudo find /var/lib/docker/containers -name *.log | sudo xargs tail -vn +1'
system_journals:
  - docker.service
  - dnsmasq.service
  - systemd-journald.service
